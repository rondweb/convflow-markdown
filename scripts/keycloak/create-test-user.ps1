# ConvFlow - Criar Usu√°rio Test no Keycloak
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "    ConvFlow - Criando Usu√°rio Test" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

$KEYCLOAK_URL = "https://keycloak-leaftix-g4gufcg6acgnbbar.eastus2-01.azurewebsites.net"
$REALM = "convflow"

Write-Host "üîê Conectando ao Keycloak em: $KEYCLOAK_URL" -ForegroundColor Yellow

# Verificar se o Keycloak est√° acess√≠vel
try {
    $testResponse = Invoke-RestMethod -Uri "$KEYCLOAK_URL/realms/$REALM/.well-known/openid_configuration" -TimeoutSec 10
    Write-Host "‚úÖ Keycloak acess√≠vel!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro: N√£o foi poss√≠vel conectar ao Keycloak" -ForegroundColor Red
    Write-Host "   Verifique se o Keycloak est√° rodando em: $KEYCLOAK_URL" -ForegroundColor Red
    Write-Host "   Verifique se o realm '$REALM' existe" -ForegroundColor Red
    exit 1
}

# Solicitar credenciais de admin
Write-Host ""
Write-Host "Para criar o usu√°rio de teste, precisamos das credenciais de admin do Keycloak:" -ForegroundColor Yellow
$adminUser = Read-Host "Admin Username"
$adminPassSecure = Read-Host "Admin Password" -AsSecureString
$adminPass = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($adminPassSecure))

Write-Host "üîë Obtendo token de acesso..." -ForegroundColor Yellow

# Obter token de admin
$tokenBody = @{
    username = $adminUser
    password = $adminPass
    grant_type = "password"
    client_id = "admin-cli"
}

try {
    $tokenResponse = Invoke-RestMethod -Uri "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" -Method Post -Body $tokenBody -ContentType "application/x-www-form-urlencoded"
    $token = $tokenResponse.access_token
    Write-Host "‚úÖ Token obtido com sucesso!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao obter token de admin. Verifique as credenciais." -ForegroundColor Red
    Write-Host "Erro: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host "üë§ Criando usu√°rio 'test'..." -ForegroundColor Yellow

# Criar usu√°rio test
$userData = @{
    username = "test"
    enabled = $true
    email = "test@convflow.com"
    firstName = "Test"
    lastName = "User"
    emailVerified = $true
    credentials = @(
        @{
            type = "password"
            value = "123456"
            temporary = $false
        }
    )
} | ConvertTo-Json -Depth 3

$headers = @{
    "Authorization" = "Bearer $token"
    "Content-Type" = "application/json"
}

try {
    $createResponse = Invoke-RestMethod -Uri "$KEYCLOAK_URL/admin/realms/$REALM/users" -Method Post -Body $userData -Headers $headers
    Write-Host "‚úÖ Usu√°rio 'test' criado com sucesso!" -ForegroundColor Green
    
    # Obter ID do usu√°rio criado
    $usersResponse = Invoke-RestMethod -Uri "$KEYCLOAK_URL/admin/realms/$REALM/users?username=test" -Headers $headers
    if ($usersResponse.Count -gt 0) {
        $userId = $usersResponse[0].id
        Write-Host "üìã ID do usu√°rio: $userId" -ForegroundColor Cyan
        
        # Verificar se existe role 'admin'
        try {
            $adminRole = Invoke-RestMethod -Uri "$KEYCLOAK_URL/admin/realms/$REALM/roles/admin" -Headers $headers
            Write-Host "üîß Atribuindo role 'admin' ao usu√°rio..." -ForegroundColor Yellow
            
            # Atribuir role admin
            $roleData = @(
                @{
                    id = $adminRole.id
                    name = "admin"
                }
            ) | ConvertTo-Json -Depth 2
            
            Invoke-RestMethod -Uri "$KEYCLOAK_URL/admin/realms/$REALM/users/$userId/role-mappings/realm" -Method Post -Body $roleData -Headers $headers
            Write-Host "‚úÖ Role 'admin' atribu√≠da com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è  Usu√°rio criado, mas n√£o foi poss√≠vel atribuir role 'admin'" -ForegroundColor Yellow
            Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ö†Ô∏è  Usu√°rio 'test' j√° existe!" -ForegroundColor Yellow
        Write-Host "   Voc√™ pode usar as credenciais: test / 123456" -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå Erro ao criar usu√°rio" -ForegroundColor Red
        Write-Host "Erro: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
}

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "    Configura√ß√£o Completa!" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üß™ Credenciais do usu√°rio de teste:" -ForegroundColor Green
Write-Host "   Username: test" -ForegroundColor White
Write-Host "   Email: test@convflow.com" -ForegroundColor White
Write-Host "   Password: 123456" -ForegroundColor White
Write-Host "   Role: admin (se atribu√≠da)" -ForegroundColor White
Write-Host ""
Write-Host "üåê Keycloak Info:" -ForegroundColor Green
Write-Host "   URL: $KEYCLOAK_URL" -ForegroundColor White
Write-Host "   Realm: $REALM" -ForegroundColor White
Write-Host "   Client ID: qRyNYFeCBNxkW7BVTx3RMnC1cKMWH2G8" -ForegroundColor White
Write-Host ""
Write-Host "‚ñ∂Ô∏è  Agora voc√™ pode:" -ForegroundColor Green
Write-Host "   1. Iniciar o frontend: npm run dev" -ForegroundColor White
Write-Host "   2. Fazer login com: test / 123456" -ForegroundColor White
Write-Host ""
