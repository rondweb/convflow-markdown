# Teste API Program√°tica - Keycloak User Management
Write-Host "üîß TESTE API PROGRAM√ÅTICA - KEYCLOAK" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìã Este teste vai:" -ForegroundColor Yellow
Write-Host "   1. Verificar se sua API backend est√° rodando" -ForegroundColor White
Write-Host "   2. Testar cria√ß√£o de usu√°rio via API" -ForegroundColor White
Write-Host "   3. Buscar o usu√°rio criado" -ForegroundColor White
Write-Host "   4. Atribuir roles ao usu√°rio" -ForegroundColor White
Write-Host ""

$API_BASE = "http://localhost:8000"
$SUCCESS_COUNT = 0
$TOTAL_TESTS = 4

# Teste 1: Verificar se API est√° rodando
Write-Host "1Ô∏è‚É£ Verificando se API backend est√° rodando..." -ForegroundColor Blue
try {
    $response = Invoke-RestMethod -Uri "$API_BASE/health" -Method GET -TimeoutSec 10
    Write-Host "   ‚úÖ Backend est√° rodando!" -ForegroundColor Green
    $SUCCESS_COUNT++
} catch {
    Write-Host "   ‚ùå Backend n√£o est√° acess√≠vel" -ForegroundColor Red
    Write-Host "   üîß Execute: uv run python src/main.py" -ForegroundColor Yellow
}

Write-Host ""

# Teste 2: Criar usu√°rio via API
Write-Host "2Ô∏è‚É£ Testando cria√ß√£o de usu√°rio..." -ForegroundColor Blue
$userData = @{
    username = "testuser"
    email = "testuser@example.com"
    firstName = "Test"
    lastName = "User"
    password = "123456"
} | ConvertTo-Json

try {
    $headers = @{ "Content-Type" = "application/json" }
    $response = Invoke-RestMethod -Uri "$API_BASE/api/users/create" -Method POST -Body $userData -Headers $headers -TimeoutSec 15
    
    if ($response.success) {
        Write-Host "   ‚úÖ Usu√°rio criado com sucesso!" -ForegroundColor Green
        Write-Host "   üìã ID do usu√°rio: $($response.user_id)" -ForegroundColor Cyan
        $SUCCESS_COUNT++
        $CREATED_USER_ID = $response.user_id
    } else {
        Write-Host "   ‚ùå Erro ao criar usu√°rio: $($response.message)" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Erro na requisi√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Teste 3: Buscar usu√°rio criado
Write-Host "3Ô∏è‚É£ Buscando usu√°rio criado..." -ForegroundColor Blue
try {
    $response = Invoke-RestMethod -Uri "$API_BASE/api/users/search/testuser" -Method GET -TimeoutSec 10
    
    if ($response.success) {
        Write-Host "   ‚úÖ Usu√°rio encontrado!" -ForegroundColor Green
        Write-Host "   üìã Username: $($response.user.username)" -ForegroundColor Cyan
        Write-Host "   üìß Email: $($response.user.email)" -ForegroundColor Cyan
        Write-Host "   üë§ Nome: $($response.user.firstName) $($response.user.lastName)" -ForegroundColor Cyan
        $SUCCESS_COUNT++
    } else {
        Write-Host "   ‚ùå Usu√°rio n√£o encontrado: $($response.message)" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Erro na busca: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Teste 4: Atribuir role admin (se usu√°rio foi criado)
Write-Host "4Ô∏è‚É£ Testando atribui√ß√£o de role..." -ForegroundColor Blue
if ($CREATED_USER_ID) {
    try {
        $response = Invoke-RestMethod -Uri "$API_BASE/api/users/assign-role/$CREATED_USER_ID/admin" -Method POST -TimeoutSec 10
        
        if ($response.success) {
            Write-Host "   ‚úÖ Role admin atribu√≠da com sucesso!" -ForegroundColor Green
            $SUCCESS_COUNT++
        } else {
            Write-Host "   ‚ùå Erro ao atribuir role: $($response.message)" -ForegroundColor Red
        }
    } catch {
        Write-Host "   ‚ùå Erro na atribui√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "   ‚è≠Ô∏è Pulando teste (usu√°rio n√£o foi criado)" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "==================" -ForegroundColor Cyan
Write-Host "RESULTADO FINAL" -ForegroundColor White
Write-Host "==================" -ForegroundColor Cyan

$PERCENTAGE = [math]::Round(($SUCCESS_COUNT / $TOTAL_TESTS) * 100)

if ($SUCCESS_COUNT -eq $TOTAL_TESTS) {
    Write-Host "üéâ TODOS OS TESTES PASSARAM! ($SUCCESS_COUNT/$TOTAL_TESTS)" -ForegroundColor Green
    Write-Host ""
    Write-Host "‚úÖ API Program√°tica est√° funcionando perfeitamente!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üöÄ Pr√≥ximos passos:" -ForegroundColor Yellow
    Write-Host "   1. Integrar com frontend React" -ForegroundColor White
    Write-Host "   2. Criar interface administrativa" -ForegroundColor White
    Write-Host "   3. Adicionar valida√ß√µes e melhorias" -ForegroundColor White
    
} else {
    Write-Host "‚ùå API Program√°tica teve problemas ($SUCCESS_COUNT/$TOTAL_TESTS testes passaram - $PERCENTAGE%)" -ForegroundColor Red
    Write-Host ""
    Write-Host "üîß Verifique:" -ForegroundColor Yellow
    Write-Host "   1. Backend est√° rodando (uv run python src/main.py)" -ForegroundColor White
    Write-Host "   2. Keycloak est√° acess√≠vel" -ForegroundColor White
    Write-Host "   3. Configura√ß√µes do .env est√£o corretas" -ForegroundColor White
    Write-Host "   4. Client tem permiss√µes de admin" -ForegroundColor White
}

Write-Host ""
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""
