# Teste da API Program√°tica - Keycloak
Write-Host "üîß TESTE API PROGRAM√ÅTICA - KEYCLOAK" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

Write-Host "üìã Este teste vai:" -ForegroundColor Yellow
Write-Host "   1. Verificar se sua API backend est√° rodando" -ForegroundColor White
Write-Host "   2. Testar cria√ß√£o de usu√°rio via API" -ForegroundColor White
Write-Host "   3. Buscar o usu√°rio criado" -ForegroundColor White
Write-Host "   4. Atribuir roles ao usu√°rio" -ForegroundColor White
Write-Host ""

# Configura√ß√µes
$API_BASE = "http://localhost:8000"  # Sua API FastAPI
$TEST_USER_DATA = @{
    username = "api_test_user"
    email = "apitest@convflow.com"
    firstName = "API"
    lastName = "Test User"
    password = "senha123"
}

# 1. Verificar se a API est√° rodando
Write-Host "1Ô∏è‚É£ Verificando se API backend est√° rodando..." -ForegroundColor White

try {
    $healthCheck = Invoke-RestMethod -Uri "$API_BASE/docs" -Method Get -TimeoutSec 5
    Write-Host "   ‚úÖ API backend est√° rodando" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå API backend n√£o est√° rodando" -ForegroundColor Red
    Write-Host "   üìã Para iniciar: python src/main.py" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Finalizando teste..." -ForegroundColor Gray
    exit
}

Write-Host ""
Write-Host "2Ô∏è‚É£ Testando cria√ß√£o de usu√°rio..." -ForegroundColor White

try {
    $createResponse = Invoke-RestMethod -Uri "$API_BASE/api/users/create" -Method Post -Body ($TEST_USER_DATA | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 10
    
    if ($createResponse.success) {
        Write-Host "   ‚úÖ Usu√°rio criado com sucesso!" -ForegroundColor Green
        Write-Host "   üìã User ID: $($createResponse.user_id)" -ForegroundColor Cyan
        Write-Host "   üìã Username: $($TEST_USER_DATA.username)" -ForegroundColor Cyan
        
        $userId = $createResponse.user_id
        
    } else {
        Write-Host "   ‚ùå Falha ao criar usu√°rio: $($createResponse.message)" -ForegroundColor Red
    }
    
} catch {
    Write-Host "   ‚ùå Erro ao chamar API de cria√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    
    # Verificar se pode ser erro de usu√°rio j√° existente
    if ($_.Exception.Message -like "*already exists*" -or $_.Exception.Message -like "*409*") {
        Write-Host "   üí° Usu√°rio pode j√° existir. Tentando buscar..." -ForegroundColor Yellow
        
        try {
            $searchResponse = Invoke-RestMethod -Uri "$API_BASE/api/users/search/$($TEST_USER_DATA.username)" -Method Get -TimeoutSec 10
            
            if ($searchResponse.success) {
                Write-Host "   ‚úÖ Usu√°rio encontrado (j√° existia)" -ForegroundColor Green
                $userId = $searchResponse.user.id
            }
            
        } catch {
            Write-Host "   ‚ùå N√£o foi poss√≠vel buscar usu√°rio existente" -ForegroundColor Red
        }
    }
}

Write-Host ""
Write-Host "3Ô∏è‚É£ Testando busca de usu√°rio..." -ForegroundColor White

if ($userId) {
    try {
        $searchResponse = Invoke-RestMethod -Uri "$API_BASE/api/users/search/$($TEST_USER_DATA.username)" -Method Get -TimeoutSec 10
        
        if ($searchResponse.success) {
            Write-Host "   ‚úÖ Usu√°rio encontrado!" -ForegroundColor Green
            Write-Host "   üìã ID: $($searchResponse.user.id)" -ForegroundColor Cyan
            Write-Host "   üìã Username: $($searchResponse.user.username)" -ForegroundColor Cyan
            Write-Host "   üìã Email: $($searchResponse.user.email)" -ForegroundColor Cyan
            Write-Host "   üìã Nome: $($searchResponse.user.firstName) $($searchResponse.user.lastName)" -ForegroundColor Cyan
            Write-Host "   üìã Ativo: $($searchResponse.user.enabled)" -ForegroundColor Cyan
            Write-Host "   üìã Email verificado: $($searchResponse.user.emailVerified)" -ForegroundColor Cyan
        } else {
            Write-Host "   ‚ùå Usu√°rio n√£o encontrado na busca" -ForegroundColor Red
        }
        
    } catch {
        Write-Host "   ‚ùå Erro ao buscar usu√°rio: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "4Ô∏è‚É£ Testando atribui√ß√£o de role..." -ForegroundColor White

if ($userId) {
    try {
        $roleResponse = Invoke-RestMethod -Uri "$API_BASE/api/users/assign-role/$userId/admin" -Method Post -TimeoutSec 10
        
        if ($roleResponse.success) {
            Write-Host "   ‚úÖ Role 'admin' atribu√≠da com sucesso!" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  Falha ao atribuir role (pode n√£o existir): $($roleResponse.message)" -ForegroundColor Yellow
        }
        
    } catch {
        Write-Host "   ‚ö†Ô∏è  Erro ao atribuir role: $($_.Exception.Message)" -ForegroundColor Yellow
        Write-Host "   üí° Role 'admin' pode n√£o existir no realm" -ForegroundColor Gray
    }
}

Write-Host ""
Write-Host "üéØ RESUMO DO TESTE" -ForegroundColor Yellow
Write-Host "==================" -ForegroundColor Cyan

if ($userId) {
    Write-Host "‚úÖ API Program√°tica est√° FUNCIONANDO!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìã Usu√°rio de teste criado:" -ForegroundColor Cyan
    Write-Host "   Username: $($TEST_USER_DATA.username)" -ForegroundColor White
    Write-Host "   Email: $($TEST_USER_DATA.email)" -ForegroundColor White
    Write-Host "   Senha: $($TEST_USER_DATA.password)" -ForegroundColor White
    Write-Host ""
    Write-Host "üöÄ Pr√≥ximos passos:" -ForegroundColor Yellow
    Write-Host "   1. Integrar com frontend React" -ForegroundColor White
    Write-Host "   2. Criar interface administrativa" -ForegroundColor White
    Write-Host "   3. Adicionar valida√ß√µes e melhorias" -ForegroundColor White
    
} else {
    Write-Host "‚ùå API Program√°tica teve problemas" -ForegroundColor Red
    Write-Host ""
    Write-Host "üîß Verifique:" -ForegroundColor Yellow
    Write-Host "   1. Backend est√° rodando (python src/main.py)" -ForegroundColor White
    Write-Host "   2. Keycloak est√° acess√≠vel" -ForegroundColor White
    Write-Host "   3. Configura√ß√µes do .env est√£o corretas" -ForegroundColor White
    Write-Host "   4. Client tem permiss√µes de admin" -ForegroundColor White
}

Write-Host ""
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""
